(function() {
  var $, Config, Fs, mkdirp;

  $ = require('atom').$;

  Fs = require('fs');

  mkdirp = require('mkdirp');

  Config = require('./config');

  module.exports = {
    activate: function(buffers) {
      Fs.exists(Config.saveFile(), (function(_this) {
        return function(exists) {
          if (exists) {
            return Fs.readFile(Config.saveFile(), {
              encoding: 'utf8'
            }, function(err, str) {
              buffers = JSON.parse(str);
              if (Config.restoreOpenFiles()) {
                return _this.restore(buffers);
              }
            });
          }
        };
      })(this));
      return this.addListeners();
    },
    save: function() {
      var activePath, buffers, file, folder;
      buffers = [];
      activePath = this.getActivePath();
      atom.workspace.eachEditor(function(editor) {
        var buffer;
        buffer = {};
        buffer.diskText = editor.buffer.cachedDiskContents;
        buffer.text = editor.buffer.cachedText;
        buffer.active = activePath === editor.getPath();
        buffer.path = editor.getPath();
        buffer.scroll = (($('.list-inline.tab-bar.inset-panel').height()) + editor.getScrollTop()) / editor.getScrollHeight() * editor.getLineCount();
        if (editor.cursors.length > 0) {
          buffer.cursor = editor.getCursorBufferPosition();
        }
        return buffers.push(buffer);
      });
      file = Config.saveFile();
      folder = file.substring(0, file.lastIndexOf(Config.pathSeparator()));
      return mkdirp(folder, (function(_this) {
        return function(err) {
          return Fs.writeFile(Config.saveFile(), JSON.stringify(buffers));
        };
      })(this));
    },
    restore: function(buffers) {
      var buffer, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = buffers.length; _i < _len; _i++) {
        buffer = buffers[_i];
        _results.push(this.open(buffer));
      }
      return _results;
    },
    open: function(buffer) {
      var col, promise, row;
      row = buffer.cursor.row;
      col = buffer.cursor.column;
      if (atom.workspace.saveSessionOpenFunc != null) {
        promise = atom.workspace.saveSessionOpenFunc(buffer.path, {
          initialLine: row,
          initialColumn: col
        });
      } else {
        promise = atom.workspace.open(buffer.path, {
          initialLine: row,
          initialColumn: col
        });
      }
      return promise.then((function(_this) {
        return function(editor) {
          var buf, scroll;
          buf = editor.buffer;
          if ((buffer.scroll != null) && Config.restoreScrollPos()) {
            scroll = buffer.scroll | 0;
            editor.scrollToBufferPosition([scroll], {
              center: true
            });
          }
          if (Config.restoreOpenFileContents() && buf.getText() !== buffer.text && buf.getText() === buffer.diskText) {
            return buf.setText(buffer.text);
          }
        };
      })(this));
    },
    getActivePath: function() {
      return $('.tab-bar').children('li.active').data('path');
    },
    addListeners: function() {
      return atom.workspace.observeTextEditors((function(_this) {
        return function(editor) {
          editor.onDidStopChanging(function() {
            return setTimeout((function() {
              return _this.save();
            }), Config.extraDelay());
          });
          return editor.onDidDestroy(function() {
            return _this.save();
          });
        };
      })(this));
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLHFCQUFBOztBQUFBLEVBQUMsSUFBSyxPQUFBLENBQVEsTUFBUixFQUFMLENBQUQsQ0FBQTs7QUFBQSxFQUNBLEVBQUEsR0FBSyxPQUFBLENBQVEsSUFBUixDQURMLENBQUE7O0FBQUEsRUFFQSxNQUFBLEdBQVMsT0FBQSxDQUFRLFFBQVIsQ0FGVCxDQUFBOztBQUFBLEVBR0EsTUFBQSxHQUFTLE9BQUEsQ0FBUSxVQUFSLENBSFQsQ0FBQTs7QUFBQSxFQUtBLE1BQU0sQ0FBQyxPQUFQLEdBRUU7QUFBQSxJQUFBLFFBQUEsRUFBVSxTQUFDLE9BQUQsR0FBQTtBQUNSLE1BQUEsRUFBRSxDQUFDLE1BQUgsQ0FBVSxNQUFNLENBQUMsUUFBUCxDQUFBLENBQVYsRUFBNkIsQ0FBQSxTQUFBLEtBQUEsR0FBQTtlQUFBLFNBQUMsTUFBRCxHQUFBO0FBQzNCLFVBQUEsSUFBRyxNQUFIO21CQUNFLEVBQUUsQ0FBQyxRQUFILENBQVksTUFBTSxDQUFDLFFBQVAsQ0FBQSxDQUFaLEVBQStCO0FBQUEsY0FBQSxRQUFBLEVBQVUsTUFBVjthQUEvQixFQUFpRCxTQUFDLEdBQUQsRUFBTSxHQUFOLEdBQUE7QUFDL0MsY0FBQSxPQUFBLEdBQVUsSUFBSSxDQUFDLEtBQUwsQ0FBVyxHQUFYLENBQVYsQ0FBQTtBQUNBLGNBQUEsSUFBRyxNQUFNLENBQUMsZ0JBQVAsQ0FBQSxDQUFIO3VCQUNFLEtBQUMsQ0FBQSxPQUFELENBQVMsT0FBVCxFQURGO2VBRitDO1lBQUEsQ0FBakQsRUFERjtXQUQyQjtRQUFBLEVBQUE7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQTdCLENBQUEsQ0FBQTthQU9BLElBQUMsQ0FBQSxZQUFELENBQUEsRUFSUTtJQUFBLENBQVY7QUFBQSxJQVVBLElBQUEsRUFBTSxTQUFBLEdB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
//# sourceURL=/Users/julien/.atom/packages/save-session/lib/files.coffee